name "AWS Oracle RDS Inventory"
rs_pt_ver 20180301
type "policy"
short_description "List all Oracle RDS instances and their CPU utilization across all AWS regions. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/rds_instance_cloudwatch_utilization/) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "low"
category "Compliance"
info(
  version: "2.0",
  provider: "AWS",
  service: "RDS",
  policy_set: "AWS Oracle RDS Inventory"
)

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list."
  tags "provider=aws"
end

###############################################################################
# Datasources
# Contains list of all AWS regions worldwide in a JSON file in GitHub
# https://raw.githubusercontent.com/rightscale/policy_templates/master/data/aws/regions.json
###############################################################################
datasource "ds_regions_list" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/aws/regions.json"
    header "User-Agent", "RS Policies"
  end
end

###############################################################################
# Loop through all regions in ds_regions_list datasource to JavaScript to 
# retrieve all RDS instances into a datasource
###############################################################################
datasource "ds_instances" do
  iterate $ds_regions_list
  request do
    run_script $js_instances_set, val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult/DBInstances/DBInstance[*]", "array") do
      field "availabilityZone", xpath(col_item,"AvailabilityZone")
      field "instanceId", xpath(col_item,"DbiResourceId")
      field "dbInstanceArn", xpath(col_item,"DBInstanceArn")
      field "dbInstanceIdentifier", xpath(col_item, "DBInstanceIdentifier")
      field "dbInstanceClass", xpath(col_item, "DBInstanceClass")
      field "engine", xpath(col_item, "Engine")
      field "region", val(iter_item, "region")
    end
  end
end

###############################################################################
# Loop through all RDS instances in ds_instances and retrieve their CPU util
###############################################################################
datasource "ds_cloudwatch_cpu_usage" do
  iterate $ds_instances
  request do
    run_script $js_cloudwatch_cpu_mem_usage, val(iter_item, "region"), val(iter_item, "dbInstanceIdentifier")
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "dbInstanceIdentifier")
      field "cpu_unit", jmes_path(col_item,"Unit")
      field "cpu_maximum", jmes_path(col_item, "Maximum")
      field "cpu_minimum", jmes_path(col_item, "Minimum")
      field "cpu_average", jmes_path(col_item, "Average")
    end
  end
end

###############################################################################
# Run JavaScript with parameters of RDS instances in ds_instances and RDS 
# instance CPU utilization in ds_cloudwatch_cpu_usage and merge CPU utilization
# into a new dataset and filter out non oracle RDS instances
###############################################################################
datasource "ds_oracle_instances" do
  run_script $js_oracle_instances, $ds_instances, $ds_cloudwatch_cpu_usage
end

###############################################################################
# Scripts
###############################################################################

script "js_instances_set", type: "javascript" do
  result "results"
  parameters "region"
  code <<-EOS
  results = {
    "auth": "auth_aws",
    "host": 'rds.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'DescribeDBInstances',
      'Version': '2014-10-31'
    }
  }
EOS
end

script "js_cloudwatch_cpu_mem_usage", type: "javascript" do
  result "results"
  parameters "region","instance_id"
  code <<-EOS
  var end_date_tmp = new Date()
  end_date_tmp.setMilliseconds(0)
  end_date_tmp.setSeconds(0)
  end_date_tmp.setMinutes(0)
  var end_date = new Date(end_date_tmp).toISOString()

  var start_date_tmp = new Date(new Date().setDate(new Date().getDate() - 30))
  start_date_tmp.setMilliseconds(0)
  start_date_tmp.setSeconds(0)
  start_date_tmp.setMinutes(0)
  var start_date = new Date(start_date_tmp).toISOString()

  results = {
    "auth": "auth_aws",
    //"auth": "monitoring_auth_aws"
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'AWS/RDS',
      'MetricName': 'CPUUtilization',
      'Dimensions.member.1.Name': 'DBInstanceIdentifier',
      'Dimensions.member.1.Value': instance_id,
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Maximum',
      'Statistics.member.2': 'Average',
      'Statistics.member.3': 'Minimum'
    }
  }
EOS
end

script "js_oracle_instances", type: "javascript" do
  parameters "ds_instances", "ds_cloudwatch_cpu_usage"
  result "results"
 code <<-EOS
 var results = []
 //For each RDS instance retrieve instanceID
 for (n=0; n < ds_instances.length; n++) {
   var instance = ds_instances[n]
   var dbInstanceIdentifier = instance["dbInstanceIdentifier"]
   //console.log("dbInstanceIdentifier is " + dbInstanceIdentifier)
   //Loop through the CPU data and match CPU data based on instanceID and put into cpu_average variable
   for (x=0; x < ds_cloudwatch_cpu_usage.length; x++) {
     var cpu_data=ds_cloudwatch_cpu_usage[x]
     var cpu_instanceid=cpu_data["instanceId"]
     //console.log("cpu_instanceid is " + cpu_instanceid)
     if (dbInstanceIdentifier == cpu_instanceid) {
      var cpu_average=parseFloat(cpu_data["cpu_average"]).toFixed(2)
      //console.log("cpu_average is " + cpu_average)
     }

   }
   //Filter out non oracle instances
   if (instance["engine"].indexOf("oracle") !== -1) {
     results.push (
       {
         "region": instance["region"],
         "availabilityZone": instance["availabilityZone"],
         "dbInstanceArn": instance["dbInstanceArn"],
         "dbInstanceIdentifier": instance["dbInstanceIdentifier"],
         "dbInstanceClass": instance["dbInstanceClass"],
         "engine": instance["engine"],
         "percent_cpu_avg": cpu_average
       }
     )
   }
 }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate $ds_oracle_instances do
    summary_template "AWS RDS instances to Resize"
    detail_template <<-EOS
# AWS RDS Instances to Resize
| Region | instanceID | Engine | Current Instance Class | Availability Zone | CPU Average % |
| ------ | ---------- | ------ | ---------------------- | ----------------- | ------------- |
{{ range data -}}
| {{.region}} | {{.dbInstanceIdentifier}} | {{.engine}} | {{.dbInstanceClass}} | {{.availabilityZone }} | {{ .percent_cpu_avg }} |
{{ end -}}

###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    check eq(size(data),0)
    escalate $email
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end
